# Plugin release automation
#
# Builds the plugin for release candidates and stable releases.
#
# Creates the release branch, the actual releas on GitHub, and the correct tag.
#
# For new major releases, the action should be run from the `main` branch.
# For patch releases, the action should be run from the corresponding release branch (e.g. `release/1.2.0`)

name: Plugin Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Plugin version (e.g. 1.2.3 or 7.2.0-rc.1)'
        required: true

env:
  PLUGIN_VERSION: ${{ github.event.inputs.version }}
  IS_RC: ${{ contains(github.event.inputs.version, 'rc') }}
  IS_PATCH_RELEASE: ${{ startsWith(github.ref, 'refs/heads/release/') }}

jobs:
  # If the static assets on the CDN have changed since the last release,
  # bump the assets version accordingly in the `static-site` branch.
  assets-version:
    name: Prepare static assets
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.inputs.version, 'rc') && ! startsWith(github.ref, 'refs/heads/release/') }}
    steps:
      # TODO: Define behavior for patch releases.
      # Patch releases must not necessarily copy assets from `main`.
      # Given the following versions: main, 1, 2, 3, 4
      #                                           ^
      #                                           |
      #                                         current
      #
      # The patch release should probably get version 3.1 or similar,
      # if version 4 is already used by the next major release.

      # Grab current assets version from `web-stories.php` and pass on to next steps.
      # - name: Checkout
      #   uses: actions/checkout@v2

      # - name: Get current assets version
      #   id: base_assets_version
      #   run: |
      #     BASE_ASSETS_VERSION=main
      #     if [[ $(cat web-stories.php) =~ $ASSETS_VERSION_REGEX ]]; then
      #       BASE_ASSETS_VERSION=${BASH_REMATCH[1]}
      #     fi
      #     echo "::set-output name=BASE_ASSETS_VERSION::$BASE_ASSETS_VERSION"
      #     env:
      #       ASSETS_VERSION_REGEX: "https://wp.stories.google/static/([^']+)"

      - name: Checkout static-site
        uses: actions/checkout@v2
        with:
          ref: static-site

      # 1. Get highest assets version
      # 2. Compare with `main`
      # 3. If they differ:
      # 3.1 Set new_version = version+1
      # 3.2 Copy `main` to new_version
      # 3.2 Push new directory
      # 4. Else, keep currently highest version

      - name: Bump assets version if needed
        run: |
          BASE_ASSETS_VERSION=main
          LATEST_ASSETS_VERSION=$(ls | sort -n | tail -1)
          NEW_ASSETS_VERSION=$LATEST_ASSETS_VERSION
          if ! diff -qr $BASE_ASSETS_VERSION $LATEST_ASSETS_VERSION &>/dev/null; then
            NEW_ASSETS_VERSION=$((LATEST_ASSETS_VERSION+1))
            cp -r $BASE_ASSETS_VERSION $NEW_ASSETS_VERSION

            git add .
            git status
            git commit -m "Bump static assets for plugin release $PLUGIN_VERSION"
            git pull --rebase
            git push origin static-site
          fi

          mkdir -p assets_version
          echo $NEW_ASSETS_VERSION > assets_version/assets_version.txt
        working-directory: public/static
        env:
          GIT_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GIT_AUTHOR_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GIT_COMMITTER_NAME: ${{ github.actor }}

      - name: Upload assets version
        uses: actions/upload-artifact@v2
        with:
          name: assets-version
          path: public/static/assets_version

  build:
    name: Build plugin
    needs: assets-version
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download assets version
        uses: actions/download-artifact@v2
        with:
          name: assets-version
        continue-on-error: true

      - name: Retrieve assets version
        id: assets_version
        run: |
          echo "::set-output name=ASSETS_VERSION::$(cat assets_version.txt)"
          rm -rf assets_version.txt
        continue-on-error: true

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v2.1.4
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Cache node modules
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
        env:
          cache-name: cache-node-modules

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          coverage: none
          tools: composer:v1

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer cache
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          npm ci
          composer install --prefer-dist --no-suggest --no-progress --no-interaction
        env:
          CI: true
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true

      - name: Create release branch
        run: |
          VERSION_WITHOUT_SUFFIX=${PLUGIN_VERSION/-rc.*/}
          BRANCH=release/$VERSION_WITHOUT_SUFFIX

          git fetch --all

          if [[ -z $(git ls-remote origin $BRANCH) ]]; then
            git checkout -b $BRANCH
          else
            git checkout -b $BRANCH --track origin/$BRANCH
          fi

      - name: Update plugin version
        run: npm run workflow:version $PLUGIN_VERSION

      - name: Update assets version
        run: npm run workflow:assets-version $ASSETS_VERSION
        if: ${{ env.ASSETS_VERSION }}
        env:
          ASSETS_VERSION: ${{ steps.assets_version.outputs.ASSETS_VERSION }}

      - name: Commit changes
        run: |
          git add .
          git status
          git diff --staged --quiet && echo 'No changes to commit; exiting!' && exit 1
          git commit -m "Prepare release $PLUGIN_VERSION"
          git push -u origin HEAD
        env:
          GIT_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GIT_AUTHOR_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GIT_COMMITTER_NAME: ${{ github.actor }}

      - name: Build plugin
        run: npm run build:js

      - name: Bundle composer version
        run: npm run workflow:build-plugin -- --composer --zip web-stories-composer.zip

      - name: Bundle regular version
        run: npm run workflow:build-plugin -- --zip web-stories.zip

      - name: Bundle development version
        run: |
          rm -rf assets/css/* assets/js/*
          NODE_ENV=development npx webpack --config webpack.config.cjs
          npm run workflow:build-plugin -- --zip web-stories-dev.zip

      - name: Set release name
        id: release_name
        run: echo "::set-output name=RELEASE_NAME::${PLUGIN_VERSION/-rc./ RC}"

      - name: Prepare release artifacts
        run: |
          mkdir -p build/release-assets
          mv build/*.zip build/release-assets/

      - name: Generate changelog
        run: echo $(npm run workflow:changelog --silent -- --next-version=$RELEASE_NAME) > build/release-assets/changelog.txt
        env:
          GITHUB_AUTH: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NAME: ${{ steps.release_name.outputs.RELEASE_NAME }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-assets
          path: build/release-assets

  create-release:
    name: Create Release Draft
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-assets
          path: build

      - name: Set tag name
        id: tag_name
        run: echo "::set-output name=TAG_NAME::v$PLUGIN_VERSION"

      - name: Set release name
        id: release_name
        run: echo "::set-output name=RELEASE_NAME::${PLUGIN_VERSION/-rc./ RC}"

      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          release_name: ${{ steps.release_name.outputs.RELEASE_NAME }}
          draft: true
          prerelease: ${{ env.IS_RC }}
          body_path: build/changelog.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload regular bundle
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/web-stories.zip
          asset_name: web-stories.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload development bundle
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/web-stories-dev.zip
          asset_name: web-stories-dev.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload composer bundle
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/web-stories-composer.zip
          asset_name: web-stories-composer.zip
          asset_content_type: application/zip

      # Done so that any triggers/webhooks will have access to the published release
      # including all the release assets.
      - name: Publish Release
        run: |
          curl \
            --request PATCH \
            --url https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }} \
            --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            --header "Accept: application/vnd.github.v3+json" \
            --data-raw '{"draft":false}'
